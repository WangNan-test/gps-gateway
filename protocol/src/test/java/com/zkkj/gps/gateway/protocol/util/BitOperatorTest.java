package com.zkkj.gps.gateway.protocol.util;

import com.zkkj.gps.gateway.protocol.destination.P_0200;
import org.junit.Assert;
import org.junit.Test;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Arrays;

import static org.junit.Assert.*;

public class BitOperatorTest {

    @Test
    public void fourBytesToInteger() {
        byte[] buff = {(byte) 255, (byte) 255, (byte) 255, (byte) 255};

        long resint = BitOperator.fourBytesToInteger(buff);
        System.out.println("resint = " + resint);
        long reslong = BitOperator.fourBytesToLong(buff);
        System.out.println("reslong = " + reslong);
        Assert.assertEquals((int) 0xffffffffL, resint);
        Assert.assertEquals(0xffffffffL, reslong);
    }

    @Test
    public void fourBytesToLong() {
    }

    @Test
    public void integerTo1Byte() {


    }

    @Test
    public void getCrc() throws Exception {

        byte[] buf = {
                // 手写字节码
                0x7e,
                0x02, 0x00,
                0x01, 0x1a,
                0x09, 0x50, 0x39, 0x62, 0x78, 0x20,
                (byte) 0xbe, (byte) 0xff,
                0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x02,
                0x02, 0x09, (byte) 0xc0, (byte) 0xd8,
                0x06, 0x7d, 0x01, 0x64,
                0x28, 0x00,
                0x00, 0x00,
                0x00, 0x00,
                0x00, 0x19, 0x04, 0x23, 0x16, 0x03,
                0X10, 0x36, (byte) 0xc4, (byte) 0xbb, 0x0a, 0x2c, 0x2d, (byte) 0xc4, 0x42, 0x22,
                0x22, 0x22, 0x2b, (byte) 0xb0, 0x62, 0x34, 0x44, 0x5f, (byte) 0xfd, 0x78,
                0x2b, (byte) 0xb0, 0x6f, (byte) 0xb9, (byte) 0x9f, (byte) 0x97, (byte) 0x99, 0x3d, 0x12, 0x34,
                (byte) 0xd5, (byte) 0xfe, (byte) 0xeb, 0x01, (byte) 0xfe, 0x23, 0x01, (byte) 0xfe, 0x12, 0x01,
                (byte) 0xfe, 0x02, 0x01, (byte) 0xfe, 0x01, 0x03, 0x01, 0x03, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00,
                0x30, (byte) 0x9d, 0x00, 0x20, 0x30, (byte) 0x9d, 0x00, 0x20, 0x4d, (byte) 0xd9,
                0x01, 0x08, 0x30, (byte) 0x9d, 0x00, 0x20, (byte) 0xa4, (byte) 0x9d, 0x00, 0x20,
                (byte) 0xf4, (byte) 0x9c, 0x00, 0x20, 0x38, (byte) 0x9d, 0x00, 0x20, (byte) 0xa4, (byte) 0x9d,
                0x00, 0x20, (byte) 0xf4, (byte) 0x9c, 0x00, 0x20, 0x30, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, (byte) 0xaf, (byte) 0xf2, 0x00, 0x08, (byte) 0xa0, (byte) 0x9d, 0x00, 0x20,
                0x72, (byte) 0x9d, 0x00, 0x20, 0x38, (byte) 0x9d, 0x00, 0x20, 0x00, 0x00,
                0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, (byte) 0xff, (byte) 0xff, (byte) 0xff, 0x33,
                0x36, 0x2a, 0x4d, 0x30, 0x30, 0x2c, 0x34, 0x35, 0x2c, 0x31,
                0x31, 0x34, 0x32, 0x33, 0x31, 0x30, 0x38, 0x30, 0x30, 0x30,
                0x38, 0x32, 0x32, 0x30, 0x26, 0x30, 0x30, 0x30, 0x30, 0x30,
                0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x26, 0x31, 0x32,
                0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30, 0x31, 0x32,
                0x33, 0x34, 0x35, 0x36, 0x23,
                (byte) 0xfb,
                0x7e
        };
        //System.out.println(BitOperator.integerTo1Byte(BitOperator.getCrc(buf)));

        byte[] bytes1 = Arrays.copyOfRange(buf, 1, buf.length - 2);
        byte[] bytesBody = EscapeUtils.doEscape4Receive(bytes1, 0, bytes1.length);

        int crc = BitOperator.getCrc(bytesBody);
        final String s = HexStringUtils.toHexString(BitOperator.integerTo1Bytes(crc));
        System.out.println(s);
    }
}